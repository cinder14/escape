// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using System.Collections.Generic;

namespace Escape.iOS
{
    public partial class CreateController : UIViewController, ICreateView
	{
		public CreateController (IntPtr handle) : base (handle)
		{
		}

        #region Properties

        public CreateViewModel ViewModel { get; set; }

        #endregion

        #region Overrides

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            this.ViewModel = new CreateViewModel(this);

            this.Title = "Create Rescue";
            this.NavigationController.NavigationBarHidden = false;
        }
        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            this.ViewModel.OnAppear();
        }

        #endregion

        #region View Methods

        protected void DoCreate()
        {
            try
            {
                DateTime parsed = default(DateTime);
                if(!DateTime.TryParse(txtWhen.Text, out parsed) || parsed == default(DateTime))
                {
                    throw new Exception("You must provide a valid date");
                }
                Rescue rescue = new Rescue()
                {
                    rescue_id = Guid.NewGuid(),
                    stamp_utc = parsed,
                    title = txtTitle.Text,
                    body = txtBody.Text
                };

                UILocalNotification localNofication = new UILocalNotification()
                {
                    FireDate = rescue.stamp_utc.ToNSDate(),
                    TimeZone = NSTimeZone.LocalTimeZone,
                    AlertTitle = rescue.title,
                    AlertBody = rescue.body,
                    UserInfo = NSDictionary.FromObjectAndKey(new NSString(rescue.rescue_id.ToString()), new NSString("rescue_id"))
                };
                UIApplication.SharedApplication.ScheduleLocalNotification(localNofication);

                this.ViewModel.AddRescue(rescue);

                //TODO:Could:Notify success first.

                this.NavigationController.PopViewController(true);
            }
            catch (Exception ex)
            {
                new UIAlertView("Error", ex.Message, null, "Okay").Show();
            }
        }

        public void EnsureNotificationPermission()
        {
            if (UIDevice.CurrentDevice.CheckSystemVersion (8, 0)) 
            {
                UIUserNotificationSettings notificationSettings = UIUserNotificationSettings.GetSettingsForTypes(UIUserNotificationType.Alert | UIUserNotificationType.Badge | UIUserNotificationType.Sound, null);
                UIApplication.SharedApplication.RegisterUserNotificationSettings(notificationSettings);
            } 
        }

        #endregion

        #region Event Handlers

        protected void EventStore_AccessComplete(bool success, NSError error)
        {
            this.ViewModel.OnCalendarAccessGranted(success);
            if (!success)
            {
                if (error != null)
                {
                    new UIAlertView("Error", error.LocalizedDescription, null, "Okay").Show();
                }
            }
        }

        partial void btnCreate_Click(NSObject sender)
        {
            this.DoCreate();
        }

        #endregion
	}
}
